theme = "ayu_dark_partial"

[editor.soft-wrap]
enable = true

[editor]
cursorline = true
color-modes = true
auto-save = true
completion-trigger-len = 1
bufferline = "multiple"
completion-replace = true
end-of-line-diagnostics = "hint"

[editor.inline-diagnostics]
cursor-line = "error"
other-lines = "error"

[editor.cursor-shape]
insert = "bar"
normal = "block"
select = "underline"

[editor.indent-guides]
render = true
character = "┆" # Some characters that work well: "▏", "┆", "┊", "⸽"
skip-levels = 1

[editor.whitespace.characters]
space = "·"
nbsp = "⍽"
tab = "→"
newline = "⏎"
tabpad = "·" # Tabs will look like "→···" (depending on tab width)

[editor.statusline]
left = ["mode", "spinner", "file-name", "file-type", "total-line-numbers", "file-encoding"]
center = []
right = ["selections",  "primary-selection-length", "position", "position-percentage", "spacer", "diagnostics", "workspace-diagnostics"]

[editor.lsp]
display-inlay-hints = true
display-messages = true

[keys.normal]
# Use system clipboard
y = ["yank_main_selection_to_clipboard", "collapse_selection"]

# Native keybindings
"ret" = ["open_below", "normal_mode"] # Maps the enter key to open_below then re-enter normal mode
C-s = ":w" # Maps Ctrl-s to the typable command :w which is an alias for :write (save file)
g.a = "code_action"  # Maps `ga` to show possible code actions

# Muscle memory
"{" = ["goto_prev_paragraph"]
"}" = ["goto_next_paragraph"]
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
S = "surround_add" # Would be nice to be able to do something after this but it isn't chainable
D = ["ensure_selections_forward", "extend_to_line_end", "delete_selection"]
X = ["yank_main_selection_to_clipboard", "delete_selection"]
i = ["insert_mode", "collapse_selection"]
a = ["append_mode", "collapse_selection"]
C-j = ["extend_to_line_bounds", "delete_selection", "paste_after"]
C-k = ["extend_to_line_bounds", "delete_selection", "move_line_up", "paste_before"]

# Undoing the 'd' + motion commands restores the selection which is annoying
u = ["undo", "collapse_selection"]

# Escape the madness! No more fighting with the cursor! Or with multiple cursors!
esc = ["collapse_selection", "keep_primary_selection"]

# Manipulating buffers with key numbers
space.tab = "goto_next_buffer"
space."`" = "goto_previous_buffer"
space.w.tab = "goto_previous_buffer"
space.w.w = ":buffer-close"
space.c = "toggle_comments"
space.w.o = "hsplit"
space.left = "jump_view_left"
space.right = "jump_view_right"
# space.w.t = "jump_view_down"
# space.w.s = "jump_view_up"
space.n = ":new"
space.x = ["yank_main_selection_to_clipboard", "delete_selection"]
g.D = "goto_reference"
backspace.q = ":sh git init ." 
backspace.w = ":sh git add --all" 
backspace.e = ":sh git commit -av" 
backspace.r = ":sh git push" 
space.l = ":toggle lsp.display-inlay-hints"

# Some nice Helix stuff
C-h = "select_prev_sibling"
C-l = "select_next_sibling"

# Muscle memory
V = ["select_mode", "extend_to_line_bounds"]

# Clipboards over registers ye ye
p = ["paste_clipboard_after", "collapse_selection"]
P = ["paste_clipboard_before", "collapse_selection"]

# Would be nice to add ya and yi, but the surround commands can't be chained
Y = ["extend_to_line_end", "yank_main_selection_to_clipboard", "collapse_selection"]

# Search for word under cursor
"*" = ["move_char_right", "move_prev_word_start", "move_next_word_end", "search_selection", "search_next"]
"#" = ["move_char_right", "move_prev_word_start", "move_next_word_end", "search_selection", "search_prev"]

# Make j and k behave as they do Vim when soft-wrap is enabled
j = "move_line_down"
k = "move_line_up"

M = ["select_textobject_inner"]

[keys.select]
# Muscle memory
"{" = ["extend_to_line_bounds", "goto_prev_paragraph"]
"}" = ["extend_to_line_bounds", "goto_next_paragraph"]
0 = "goto_line_start"
"$" = "goto_line_end"
"^" = "goto_first_nonwhitespace"
G = "goto_file_end"
D = ["extend_to_line_bounds", "delete_selection", "normal_mode"]
C = ["goto_line_start", "extend_to_line_bounds", "change_selection"]
S = "surround_add" # Basically 99% of what I use vim-surround for
u = ["switch_to_lowercase", "collapse_selection", "normal_mode"]
U = ["switch_to_uppercase", "collapse_selection", "normal_mode"]

# Visual-mode specific muscle memory
i = "select_textobject_inner"
a = "select_textobject_around"
space.x = ["yank_main_selection_to_clipboard", "delete_selection"]

# Some extra binds to allow us to insert/append in select mode because it's nice with multiple cursors
tab = ["insert_mode", "collapse_selection"] # tab is read by most terminal editors as "C-i"
C-a = ["append_mode", "collapse_selection"]

# Make selecting lines in visual mode behave sensibly
k = ["extend_line_up", "extend_to_line_bounds"]
j = ["extend_line_down", "extend_to_line_bounds"]

# Clipboards over registers ye ye
d = ["yank_main_selection_to_clipboard", "delete_selection"]
x = ["yank_main_selection_to_clipboard", "delete_selection"]
y = ["yank_main_selection_to_clipboard", "normal_mode", "flip_selections", "collapse_selection"]
Y = ["extend_to_line_bounds", "yank_main_selection_to_clipboard", "goto_line_start", "collapse_selection", "normal_mode"]
p = "replace_selections_with_clipboard" # No life without this
P = "paste_clipboard_before"

# Escape the madness! No more fighting with the cursor! Or with multiple cursors!
esc = ["keep_primary_selection", "normal_mode"]

[keys.insert]
# Escape the madness! No more fighting with the cursor! Or with multiple cursors!
esc = ["collapse_selection", "normal_mode"]
A-B = "move_prev_word_start"
A-F = "move_next_word_start"

